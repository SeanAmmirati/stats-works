knitr::opts_chunk$set(echo = TRUE)
estimb1 <- approx(posteriorc,num = TRUE,cont_table = cont_table, sigmasq = 1)/approx(posteriorc,num = FALSE,cont_table = cont_table, sigmasq = 1)
estimb1 <- approx(posteriorc,num = TRUE,cont_table = cont_table, sigmasq = 1)/approx(posteriorc,num = FALSE,cont_table = cont_table, sigmasq = 1)
approx <- function(f,num=FALSE, ...) {
sum(sapply(seq(0.01,0.99,0.01),function(p) sapply(seq(0.01,0.99,0.01), function(q) f(p,q,num,...))))
}
estim <- approx(posteriorb,TRUE, cont_table = cont_table)/approx(posteriorb, cont_table = cont_table)
posteriorb <- function(p,q, cont_table, num = FALSE){
if (num == TRUE) {
if (p >= q) {
return(0)
}
}
obs_row_totals = apply(cont_table, 1, sum)
obs_coordinates = c(cont_table)
obs_rows_list = lapply(1:nrow(cont_table), function(i) cont_table[i,] - 1)
# Here, ret is the probability of the contingency table given p and q -- it is a likelihood multinomial distributed.
# So p,q are Dirichlet distributed.
constant <- (prod(gamma(obs_row_totals)) / (prod(gamma(obs_coordinates))))
ret <- constant*(p^obs_rows_list[[1]][1])*((1 - p)^obs_rows_list[[1]][2])*(q^obs_rows_list[[2]][1])*((1 - q)^obs_rows_list[[2]][2])
return(ret)
}
estim <- approx(posteriorb,TRUE, cont_table = cont_table)/approx(posteriorb, cont_table = cont_table)
cont_table <- matrix(c(5, 15, 30, 20), nrow = 2,
dimnames = list(c('Has traveled outside US','Has not traveled outside US'), c('Non-Artist','Artist')))
cont_table
estim <- approx(posteriorb,TRUE, cont_table = cont_table)/approx(posteriorb, cont_table = cont_table)
estim
posteriorc <- function(p,q, cont_table, num = FALSE, sigmasq = 1){
if (num == TRUE) {
if (p >= q) {
return(0)
}
}
obs_rows_list = lapply(1:nrow(cont_table), function(i) cont_table[i,] - 1)
logit1 <- log((p/(1 - p)))
logit2 <- log((q/(1 - q)))
## Now our likelihood depends on the difference in logits -- it is no longer a constant given the data. This introduces
## the dependence structure we want.
expo <- exp((-(logit1 - logit2)^2)/(2*sigmasq))
ret <- expo*(p^obs_rows_list[[1]][1])*((1 - p)^obs_rows_list[[1]][2])*(q^obs_rows_list[[2]][1])*((1 - q)^obs_rows_list[[2]][2])
return(ret)
}
estimb1 <- approx(posteriorc,num = TRUE,cont_table = cont_table, sigmasq = 1)/approx(posteriorc,num = FALSE,cont_table = cont_table, sigmasq = 1)
estimb2 <- approx(posteriorc,num = TRUE,cont_table = cont_table, sigmasq = .25)/approx(posteriorc,num = FALSE,cont_table = cont_table, sigmasq = .25)
estimb3 <- approx(posteriorc,num = TRUE,cont_table = cont_table, sigmasq = 4)/approx(posteriorc,num = FALSE,cont_table = cont_table, sigmasq = 4)
estimb1
estimb2
estimb3
estimb3
nrow(cont_table)
estimb3 <- approx(posteriorc,num = TRUE,cont_table = cont_table, sigmasq = 4)/approx(posteriorc,num = FALSE, cont_table = cont_table, sigmasq = 4)
estimb1
estimb2
```{r cont_table}
```{r cont_table}
cont_table
```{r}
estimb1 <- approx(posteriorc,num = TRUE,cont_table = cont_table, sigmasq = 1)/approx(posteriorc,num = FALSE, cont_table = cont_table, sigmasq = 1)
estimb2 <- approx(posteriorc,num = TRUE,cont_table = cont_table, sigmasq = .25)/approx(posteriorc,num = FALSE, cont_table = cont_table, sigmasq = .25)
estimb3 <- approx(posteriorc,num = TRUE,cont_table = cont_table, sigmasq = 4)/approx(posteriorc,num = FALSE, cont_table = cont_table, sigmasq = 4)
estimb1
estimb3
lapply(1:nrow(cont_table), function(i) cont_table[i,] - 1)
ret <- expo*(p^obs_rows_w_prior[1,1])*((1 - p)^obs_rows_w_prior[1,2])*(q^obs_rows_w_prior[2,1])*((1 - q)^obs_rows_w_prior[2,2])
posteriorc <- function(p,q, cont_table, num = FALSE, sigmasq = 1){
if (num == TRUE) {
if (p >= q) {
return(0)
}
}
obs_rows_w_prior = cont_table - 1
logit1 <- log((p/(1 - p)))
logit2 <- log((q/(1 - q)))
## Now our likelihood depends on the difference in logits -- it is no longer a constant given the data. This introduces
## the dependence structure we want.
expo <- exp((-(logit1 - logit2)^2)/(2*sigmasq))
ret <- expo*(p^obs_rows_w_prior[1,1])*((1 - p)^obs_rows_w_prior[1,2])*(q^obs_rows_w_prior[2,1])*((1 - q)^obs_rows_w_prior[2,2])
return(ret)
}
estimb1 <- approx(posteriorc,num = TRUE,cont_table = cont_table, sigmasq = 1)/approx(posteriorc,num = FALSE, cont_table = cont_table, sigmasq = 1)
estimb1
ret <- constant*(p^obs_rows_w_prior[1,1])*((1 - p)^obs_rows_w_prior[1,2])*(q^obs_rows_w_prior[2,1])*((1 - q)^obs_rows_w_prior[2,2])
posteriorb <- function(p,q, cont_table, num = FALSE){
if (num == TRUE) {
if (p >= q) {
return(0)
}
}
obs_row_totals = apply(cont_table, 1, sum)
obs_coordinates = c(cont_table)
obs_rows_w_prior = cont_table - 1
# Here, ret is the probability of the contingency table given p and q -- it is a likelihood multinomial distributed.
# So p,q are Dirichlet distributed.
constant <- (prod(gamma(obs_row_totals)) / (prod(gamma(obs_coordinates))))
ret <- constant*(p^obs_rows_w_prior[1,1])*((1 - p)^obs_rows_w_prior[1,2])*(q^obs_rows_w_prior[2,1])*((1 - q)^obs_rows_w_prior[2,2])
return(ret)
}
approx <- function(f,num=FALSE, ...) {
sum(sapply(seq(0.01,0.99,0.01),function(p) sapply(seq(0.01,0.99,0.01), function(q) f(p,q,num,...))))
}
estim <- approx(posteriorb,TRUE, cont_table = cont_table)/approx(posteriorb, cont_table = cont_table)
estim
estimb1 <- approx(posteriorc,num = TRUE,cont_table = cont_table, sigmasq = 1)/approx(posteriorc,num = FALSE, cont_table = cont_table, sigmasq = 1)
estimb1
estimb1
estimb2
approx(posteriorc,num = TRUE,sigmasq = 400000)/approx(posteriorc,num = FALSE,sigmasq = 400000)
approx(posteriorc,num = TRUE,sigmasq = 400000)/approx(posteriorc,num = FALSE,sigmasq = 400000)
approx(posteriorc,num = TRUE, cont_table = cont_table, sigmasq = 400000)/approx(posteriorc,num = FALSE, cont_table = cont_table, sigmasq = 400000)
posteriorc <- function(p,q, cont_table, num = FALSE, sigmasq = 1){
if (num == TRUE) {
if (p >= q) {
return(0)
}
}
obs_rows_w_prior = cont_table - 1
logit1 <- log((p/(1 - p)))
logit2 <- log((q/(1 - q)))
## Now our likelihood depends on the difference in logits -- it is no longer a constant given the data. This introduces
## the dependence structure we want.
expo <- exp((-(logit1 - logit2)^2)/(2*sigmasq))
ret <- expo*(p^obs_rows_w_prior[1,1])*((1 - p)^obs_rows_w_prior[1,2])*(q^obs_rows_w_prior[2,1])*((1 - q)^obs_rows_w_prior[2,2])
return(ret)
}
constant <- (prod(gamma(obs_row_totals)) / (prod(gamma(obs_coordinates))))
posteriorb <- function(p,q, cont_table, num = FALSE){
if (num == TRUE) {
if (p >= q) {
return(0)
}
}
obs_row_totals = apply(cont_table, 1, sum)
obs_coordinates = c(cont_table)
obs_rows_w_prior = cont_table - 1
## Here, ret is the probability of the contingency table given p and q -- it is a likelihood multinomial distributed.
## So p,q are Dirichlet distributed.
constant <- (prod(gamma(obs_row_totals)) / (prod(gamma(obs_coordinates))))
ret <- constant*(p^obs_rows_w_prior[1,1])*((1 - p)^obs_rows_w_prior[1,2])*(q^obs_rows_w_prior[2,1])*((1 - q)^obs_rows_w_prior[2,2])
return(ret)
}
install.packages('rmarkdown')
install.packages("rmarkdown")
rmarkdown::github_document()
